// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  username      String
  email         String   @unique
  password      String
  discriminator String // Discord-style discriminator (e.g., #1234)
  avatar        String?
  status        String   @default("offline") // online, idle, dnd, offline
  bio           String?
  location      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastSeen      DateTime @default(now())

  // Relationships
  servers       ServerMember[]
  messages      Message[]
  reactions     Reaction[]
  notifications Notification[]
  invites       Invite[]

  @@unique([username, discriminator])
  @@map("users")
}

model Server {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  members  ServerMember[]
  channels Channel[]
  invites  Invite[]

  @@map("servers")
}

model ServerMember {
  id       String   @id @default(cuid())
  serverId String
  userId   String
  role     String   @default("member") // owner, admin, moderator, member
  joinedAt DateTime @default(now())

  // Relationships
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([serverId, userId])
  @@map("server_members")
}

model Channel {
  id        String   @id @default(cuid())
  name      String
  type      String // text, voice, announcement
  serverId  String
  position  Int // position of the channel in the server (for ordering channels in the UI)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // considering adding isPrivate field to the channel (for private channels)

  // Relationships
  server   Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("channels")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  channelId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  reactions Reaction[]

  // Might want to support:
  // replyToMessageId (for threads or replies)
  // attachments (for images, files, etc.)
  // embeds (for rich content like YouTube videos, etc.)
  // mentions (for @username or @channel)
  // reactions (for emojis)
  // editedAt (for tracking edits)
  // pinned (for pinned messages)

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  userId    String
  createdAt DateTime @default(now())

  // Relationships
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("reactions")
}

model Notification {
  id        String   @id @default(cuid())
  type      String // mention, message, reaction, server, friend, system
  title     String
  message   String
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Consider linking to a target (e.g., messageId, serverId) via optional foreign keys

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Invite {
  id        String    @id @default(cuid())
  code      String    @unique
  serverId  String
  server    Server    @relation(fields: [serverId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  used      Boolean   @default(false)
  singleUse Boolean   @default(false)
  usedById  String?
  usedBy    User?     @relation(fields: [usedById], references: [id])
  usedAt    DateTime?
}
